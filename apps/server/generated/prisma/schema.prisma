// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserSex {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  PENDING
  DELETED
}

model User {
  id        String     @id @default(uuid())
  username  String     @unique @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  firstName String     @db.VarChar(255)
  lastName  String?    @db.VarChar(255)
  slug      String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  salt      String     @db.VarChar(255)
  avatar    String?    @db.VarChar(255)
  address   String?    @db.VarChar(255)
  birthdate DateTime?  @db.Date
  msisdn    String?    @db.VarChar(255)
  sex       UserSex?
  status    UserStatus @default(ACTIVE)
  roleId    String
  role      Role       @relation(fields: [roleId], references: [id])
  keyToken  KeyToken[]
}

model Resource {
  id          String  @id @default(uuid())
  name        String  @unique @db.VarChar(255)
  slug        String  @unique @db.VarChar(255)
  description String? @db.Text
  roles       Grant[]
}

enum RoleStatus {
  ACTIVE
  INACTIVE
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique @db.VarChar(255)
  slug        String     @unique @db.VarChar(255)
  status      RoleStatus @default(ACTIVE)
  description String?    @db.Text
  grants      Grant[]    @relation("RoleGrants")
  users       User[]
}

model Grant {
  id         String   @id @default(uuid())
  roleId     String
  resourceId String
  role       Role     @relation("RoleGrants", fields: [roleId], references: [id])
  resource   Resource @relation(fields: [resourceId], references: [id])
  action     String   @db.VarChar(20) // create:any | create:own | ...
  attribute  String   @db.VarChar(20) // * | '*, !password | ...

  @@unique([roleId, resourceId, action], name: "unique_role_resource_action")
}

enum OTPStatus {
  ACTIVE
  PENDING
  BLOCKED
}

model OTP {
  id        String    @id @default(uuid())
  token     String    @unique @db.VarChar(255)
  email     String    @db.VarChar(255)
  status    OTPStatus @default(ACTIVE)
  expiresAt DateTime  @default(dbgenerated("NOW() + INTERVAL '60 seconds'"))
}

enum ApiKeyPermission {
  READ
  WRITE
  DELETE
  ALL
}

model ApiKey {
  id          String             @id @default(uuid())
  key         String             @unique @db.VarChar(255)
  status      Boolean            @default(true)
  permissions ApiKeyPermission[]
}

model KeyToken {
  id                String   @id @default(uuid())
  browserId         String   @db.VarChar(255)
  publicKey         String   @db.Text
  privateKey        String   @db.Text
  refreshTokensUsed String[] @default([]) @db.Text
  refreshToken      String   @db.Text
  userId            String
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, browserId], name: "unique_user_browser")
}
