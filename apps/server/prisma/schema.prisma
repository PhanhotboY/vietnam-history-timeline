// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserSex {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  PENDING
  DELETED
}

model User {
  id        String      @id @db.Uuid @default(uuid())
  username  String      @unique @db.VarChar(255)
  email     String      @unique @db.VarChar(255)
  firstName String      @db.VarChar(255)
  lastName  String?     @db.VarChar(255)
  slug      String      @unique @db.VarChar(255)
  password  String      @db.VarChar(255)
  salt      String      @db.VarChar(255)
  avatarId  String?     @db.Uuid
  address   String?     @db.VarChar(255)
  birthdate DateTime?   @db.Date
  msisdn    String?     @db.VarChar(255)
  sex       UserSex?
  status    UserStatus  @default(ACTIVE)
  roleId    String      @db.Uuid

  role      Role        @relation(fields: [roleId], references: [id])
  avatar    Image?      @relation("UserAvatar", fields: [avatarId], references: [id])
  keyToken              KeyToken[]
  createdEvents         HistoricalEvent[]
  editedEvents          EventEdit[]
  blogPosts             BlogPost[]
  images                Image[] @relation("ImageUploader")

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([username], name: "idx_user_username")
  @@index([email], name: "idx_user_email")
}

model Resource {
  id          String      @id @db.Uuid @default(uuid())
  name        String     @unique @db.VarChar(255)
  slug        String     @unique @db.VarChar(255)
  description String?     @db.Text
  roles       Grant[]
}

enum RoleStatus {
  ACTIVE
  INACTIVE
}

model Role {
  id          String      @id @db.Uuid @default(uuid())
  name        String      @unique @db.VarChar(255)
  slug        String      @unique @db.VarChar(255)
  status      RoleStatus  @default(ACTIVE)
  description String?     @db.Text
  grants      Grant[]     @relation("RoleGrants")
  users       User[]

  @@index([status], name: "idx_role_status")
  @@index([slug], name: "idx_role_slug")
}

model Grant {
  id          String      @id @db.Uuid @default(uuid())
  roleId    String      @db.Uuid
  resourceId String     @db.Uuid
  role      Role        @relation("RoleGrants", fields: [roleId], references: [id])
  resource  Resource    @relation(fields: [resourceId], references: [id])
  action    String      @db.VarChar(20) // create:any | create:own | ...
  attribute String      @db.VarChar(20) // * | '*, !password | ...

  @@unique([roleId, resourceId, action ], name: "unique_role_resource_action")
  @@index([roleId], name: "idx_grant_role")
}

enum OTPStatus {
  ACTIVE
  PENDING
  BLOCKED
}

model OTP {
  id        String      @id @db.Uuid @default(uuid())
  token     String      @unique @db.VarChar(255)
  email     String      @db.VarChar(255)
  status    OTPStatus   @default(ACTIVE)
  expiresAt DateTime    @default(dbgenerated("NOW() + INTERVAL '60 seconds'"))
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @updatedAt @db.Timestamp(6)

  @@index([email], name: "idx_otp_email")
  @@index([status], name: "idx_otp_status")
  @@index([expiresAt], name: "idx_otp_expires_at")
}

enum ApiKeyPermission {
  READ
  WRITE
  DELETE
  ALL
}

model ApiKey {
  id        String @id @db.Uuid @default(uuid())
  key       String @unique @db.VarChar(255)
  status    Boolean @default(true)
  permissions ApiKeyPermission[] @default([])  
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @updatedAt @db.Timestamp(6)
}

model KeyToken {
  id                String @id @db.Uuid @default(uuid())
  browserId         String @db.VarChar(255)
  publicKey         String @db.Text
  privateKey        String @db.Text
  refreshTokensUsed String[] @default([]) @db.Text
  refreshToken      String @db.Text
  userId            String @db.Uuid
  user              User @relation(fields: [userId], references: [id])
  createdAt         DateTime    @default(now()) @db.Timestamp(6)
  updatedAt         DateTime    @updatedAt @db.Timestamp(6)

  @@unique([userId, browserId], name: "unique_user_browser")
}

model HistoricalEvent {
  id          String  @id @db.Uuid @default(uuid())
  fromDay     Int?    @db.SmallInt 
  fromMonth   Int?    @db.SmallInt
  fromYear    Int     @db.SmallInt
  toDay       Int?    @db.SmallInt
  toMonth     Int?    @db.SmallInt
  toYear      Int?    @db.SmallInt

  name        String    @db.VarChar(255)
  content     String    @db.Text
  thumbnailId String?   @db.Uuid
  authorId    String    @db.Uuid
  categoryIds String[]  @db.Uuid
  
  editors     EventEdit[]
  thumbnail   Image? @relation(fields: [thumbnailId], references: [id])
  author      User @relation(fields: [authorId], references: [id])
  categories  EventCategory[] @relation("EventCategories")
  
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @updatedAt @db.Timestamp(6)

  @@index([fromYear], name: "idx_event_from_year")
  @@index([fromMonth], name: "idx_event_from_month")
  @@index([fromDay], name: "idx_event_from_day")
  @@index([toYear], name: "idx_event_to_year")
  @@index([toMonth], name: "idx_event_to_month")
  @@index([toDay], name: "idx_event_to_day")
  @@index([categoryIds], name: "idx_event_categories")
}

model EventCategory {
  id          String @id @db.Uuid @default(uuid())
  name        String @unique @db.VarChar(255)
  slug        String @unique @db.VarChar(255) 
  description String? @db.Text

  events      HistoricalEvent[] @relation("EventCategories")

  @@index([slug], name: "idx_category_slug")
}

model EventEdit {
  id        String    @id @db.Uuid @default(uuid())
  eventId   String    @db.Uuid
  editorId  String    @db.Uuid
  editedAt  DateTime  @default(now()) @db.Timestamp(6)

  prevContent String  @db.Text
  newContent  String  @db.Text
  
  prevFromDay   Int? @db.SmallInt
  prevFromMonth Int? @db.SmallInt
  prevFromYear  Int @db.SmallInt
  prevToDay     Int? @db.SmallInt
  prevToMonth   Int? @db.SmallInt
  prevToYear    Int? @db.SmallInt
  
  newFromDay    Int? @db.SmallInt
  newFromMonth  Int? @db.SmallInt
  newFromYear   Int? @db.SmallInt
  newToDay      Int? @db.SmallInt
  newToMonth    Int? @db.SmallInt
  newToYear     Int? @db.SmallInt

  event     HistoricalEvent @relation(fields: [eventId], references: [id])
  editor    User      @relation(fields: [editorId], references: [id])

  @@index([eventId], name: "idx_edit_event")
  @@index([editorId], name: "idx_edit_editor")
}

model EventPeriod {
  id          String @id @db.Uuid @default(uuid())

  fromDay     Int? @db.SmallInt 
  fromMonth   Int? @db.SmallInt
  fromYear    Int @db.SmallInt

  toDay       Int? @db.SmallInt
  toMonth     Int? @db.SmallInt
  toYear      Int @db.SmallInt

  name        String @unique @db.VarChar(255)
  slug        String @unique @db.VarChar(255) 
  description String? @db.Text
}

model Image {
  id          String  @id @db.Uuid @default(uuid())
  name        String  @db.VarChar(255) // memorable name
  caption     String? @db.Text
  description String? @db.Text
  url         String  @db.VarChar(255) // actual image url
  link        String? @db.VarChar(255) // link to redirect when clicking on image
  type        String? @db.VarChar(100) // thumbnail, banner, avatar, ...
  uploaderId  String  @db.Uuid

  users       User[]  @relation("UserAvatar")
  uploader    User    @relation("ImageUploader", fields: [uploaderId], references: [id])
  blogPosts   BlogPost[]
  events      HistoricalEvent[]

  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @updatedAt @db.Timestamp(6)
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model BlogPost {
  id        String      @id @db.Uuid @default(uuid())
  title     String      @db.VarChar(255)
  slug      String      @unique @db.VarChar(255)
  content   String      @db.Text
  excerpt   String?     @db.Text
  status    BlogStatus  @default(DRAFT)
  thumbnailId String?   @db.Uuid
  authorId  String      @db.Uuid

  thumbnail Image?      @relation(fields: [thumbnailId], references: [id])
  author    User        @relation(fields: [authorId], references: [id])   

  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @updatedAt @db.Timestamp(6)

  @@index([status], name: "idx_blog_status")
  @@index([authorId], name: "idx_blog_author")
  @@index([slug], name: "idx_blog_slug")
}